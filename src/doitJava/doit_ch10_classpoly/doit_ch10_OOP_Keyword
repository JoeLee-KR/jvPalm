Chap 10. Class Inheritance, Polymorphism (MethodOverriding01.java)
10.1. Inheritance, Polymorphism
  - Inheritance: reduce code, Described Polymorphism
  - class Fruit {}
  - class Apple extends Fruit {}
  - Fruit f1 = new Fruit();
  - Fruit f2 = new Apple();
  - Fruit[] f3 = { new Apple(), new Graph(), new Kiwi(), new Apple() };

10.2. Object Type Casting (MethodOverriding01.java)
  - up casting (to Parents) is every enable.
    - Apple a1 = new Apple();  // allow, normal
    - Fruit f4 = a1;  // allow, upper casting & use Apple a1()
  - down casting (to Childs) is sometime enable or disable.
    - Fruit f5 = (Apple) f1;  // not allow, ClassCastException
    - Fruit f6 = f2;          // allow, already alloced apple()
    - Fruit f6 = (Apple) f2;  // allow, already alloced apple()
  - instanceof method: check casting
    - A <- B <- C;
    - c instanceof A; // true
    - c instanceof B; // true

10.3. Method overriding
  - method overriding: to use overriding at child for parents method, with same arg. signature & return type.
    - Every print() is B.print()
        A ab = new B(); ab.print();
        ((A)ab).print();
        A ac = ((A)ab); ac.print();
  - method overloading: to use similar method name, but diff arg. signature & return type.

10.4. Instance Field(=Member), Static Member(=Field), Static Method
  - overriding only use for Method overriding.
    - Instance Field(Member): can't overriding, follow Class Type: e.g. A ab = new B(); ab.m=33 (A.m=33)
    - Static Field(Member): can't overriding, follow Class Type: e.g. A ab = new B(); ab.m=33 (A.m=33)
    - Static Method: can't overriding, follow Class Type: e.g. A.print() is same ab.print();
  - Finally, Inheritance used only on Instance Method,
    Not Instance Field, Static Field, Static Method.

10.5. super()
10.6. Object Class
  - Object.hashCode();
  - Object.toString();
  - Object.equals





